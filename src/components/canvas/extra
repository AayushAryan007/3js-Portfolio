// #include <bits/stdc++.h> 
// using namespace std;  
// #define endl "\n"
// #define ll long long int
// #define mod 1e9+7


// int binpow(int a, int b)
// {
//   if(b==0)
//   return 1;
//   int res=binpow(a,b/2);

//   if(b%2)
//   return res*res*a;
//   else
//   return res*res;
// }

// int gcd(int a, int b)
// {
//     // Everything divides 0
//     if (a == 0)
//        return b;
//     if (b == 0)
//        return a;
  
//     // base case
//     if (a == b)
//         return a;
  
//     // a is greater
//     if (a > b)
//         return gcd(a-b, b);
//     return gcd(a, b-a);
// }

// bool isprime(long long int n)  //to check prime
// {
//     for(int i=2; i*i<=n; i++)
//     {
//         if(n%i==0)return false;
//     }
//     return true;
// }


// int LIS(vector<int> &a)//returns longest non decreasing subsequence
// {
//   //lnds[i]=element at which an increasng subsequence of length 'i' ends

//   vector<int> lis;
//   for(auto &x:a)
//   {
//     auto it=upper_bound(lis.begin(),lis.end(), x); //upper_bound for non-decreasing
//     if(it==lis.end())
//     lis.push_back(x);
//     else
//     *it=x;
//   }

//   return lis.size();
// }
 
//  //iota(v.begin(),v.end(),1); assign 1-n incrementation in vector
//  void reverse(int arr[], int index, int count)
// {
//     if (index < count)
//     {
//         swap(arr[index], arr[count]);
//         reverse(arr, index + 1, count - 1);
//     }
// }

// void solve()
// {
     
// }


// int main()  
// {
//     ios_base::sync_with_stdio(false);  
//     cin.tie(NULL); cout.tie(NULL); // flushes cout  
    
//     //start writing below
//     int t;
//     cin>>t;
//     while(t--)
//     {
//        solve(); 
//     }
 
//     return 0;  
// }